{"pageProps":{"note":{"id":"gxtjff8r9znuypi2q4r5gjw","title":"Any","desc":"","updated":1690040009602,"created":1690039209656,"custom":{},"fname":"lang.cpp.std.any","type":"note","vault":{"fsPath":".","selfContained":true,"name":"DendronVault"},"contentHash":"c89027f01fff689ca525df63ca2eca22","links":[],"anchors":{"summary":{"type":"header","text":"Summary","value":"summary","line":8,"column":0,"depth":3},"typical-usage":{"type":"header","text":"Typical usage","value":"typical-usage","line":19,"column":0,"depth":3},"hetereogeneous-vector":{"type":"header","text":"Hetereogeneous vector","value":"hetereogeneous-vector","line":20,"column":0,"depth":4},"examples":{"type":"header","text":"Examples","value":"examples","line":31,"column":0,"depth":3},"basic-usage":{"type":"header","text":"Basic usage","value":"basic-usage","line":32,"column":0,"depth":4},"stdbad_any_cast":{"type":"header","text":"std::bad_any_cast","value":"stdbad_any_cast","line":51,"column":0,"depth":4},"stdany_cast":{"type":"header","text":"std::any_cast","value":"stdany_cast","line":62,"column":0,"depth":4},"stdany_cast-with-references":{"type":"header","text":"std::any_cast with references","value":"stdany_cast-with-references","line":71,"column":0,"depth":4},"has_value-and-reset":{"type":"header","text":"has_value and reset","value":"has_value-and-reset","line":79,"column":0,"depth":4}},"children":[],"parent":"vs1fiq1wm14sf0cqq4ok5vj","data":{}},"body":"<h1 id=\"any\">Any<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#any\"></a></h1>\n<h3 id=\"summary\">Summary<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#summary\"></a></h3>\n<p><code>std::any</code> is a type-safe container for single values of any type introduces as part of C++17.\nIt can be thought of as a safer and more convenient alternative to <code>void*</code>. It is similar to\n<code>std::variant</code> but it can hold any type, not just types specified in the template parameters.</p>\n<p>std::any is useful when you need a variable that can hold any type, but you don't know the types at\ncompile time. However, it is generally better to avoid such situations if possible, because it\nmakes your code more error-prone and harder to understand. If you find yourself using std::any a\nlot, it might be a sign that your code could benefit from more polymorphism or a redesign of your\ndata structures.</p>\n<h3 id=\"typical-usage\">Typical usage<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#typical-usage\"></a></h3>\n<h4 id=\"hetereogeneous-vector\">Hetereogeneous vector<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#hetereogeneous-vector\"></a></h4>\n<p>std::any is useful when you need a variable that can hold any type, but you don't know the types at\ncompile time. For example, you might want to create a container that can hold values of any type.</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&#x3C;</span>std<span class=\"token double-colon punctuation\">::</span>any<span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"examples\">Examples<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#examples\"></a></h3>\n<h4 id=\"basic-usage\">Basic usage<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#basic-usage\"></a></h4>\n<p>To retrieve the value from std::any, you need to know the type of the value, and you can use\nstd::any_cast to get it:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;any></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  std<span class=\"token double-colon punctuation\">::</span>any a<span class=\"token punctuation\">;</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&#x3C;&#x3C;</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">any_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">3.14f</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&#x3C;&#x3C;</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">any_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n  a <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&#x3C;&#x3C;</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">any_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span>std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"stdbad_any_cast\">std::bad_any_cast<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#stdbad_any_cast\"></a></h4>\n<p>Calling <code>std::any_cast</code> with the wrong type will throw a <code>std::bad_any_cast</code> exception.</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token double-colon punctuation\">::</span>any a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&#x3C;&#x3C;</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">any_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>bad_any_cast<span class=\"token operator\">&#x26;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&#x3C;&#x3C;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"stdany_cast\">std::any_cast<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#stdany_cast\"></a></h4>\n<p><code>std::any_cast</code> can also be used to check if an <code>std::any</code> holds a particular type.</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token double-colon punctuation\">::</span>any a <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">any_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"a holds an int\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"stdany_cast-with-references\">std::any_cast with references<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#stdany_cast-with-references\"></a></h4>\n<p><code>std::any_cast</code> can also be used to get a reference to the value held by an <code>std::any</code>.</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token double-colon punctuation\">::</span>any a <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">&#x26;</span> i <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">any_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&#x26;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ni <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&#x3C;&#x3C;</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">any_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"has_value-and-reset\">has_value and reset<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#has_value-and-reset\"></a></h4>\n<p><code>std::any</code> has a <code>has_value</code> method that returns true if it holds a value and false otherwise.\nIt also has a <code>reset</code> method that clears the value it holds.</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token double-colon punctuation\">::</span>any a <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&#x3C;&#x3C;</span> std<span class=\"token double-colon punctuation\">::</span>boolalpha <span class=\"token operator\">&#x3C;&#x3C;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">has_value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// now a doesn't hold a value</span>\nstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&#x3C;&#x3C;</span> std<span class=\"token double-colon punctuation\">::</span>boolalpha <span class=\"token operator\">&#x3C;&#x3C;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">has_value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n</code></pre>","noteIndex":{"id":"txvdlk2mbhl2y2muokxxozo","title":"Root","desc":"","updated":1664676002873,"created":1664671276173,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"DendronVault"},"contentHash":"896d57ab408d13d6cce66d3360a4c1be","links":[],"anchors":{"quick-access":{"type":"header","text":"Quick access","value":"quick-access","line":8,"column":0,"depth":2}},"children":["akgpjs39sueidxnil3k1feg","cq5doh4f24evc4ewzhg5yf3","3xtbw7nonlogrlsu9k2hymz","lubegqfiz1ik4hq8fnomek2","uhd2kqv69ly9jb7r0o6dw1t","155oput5ed55eq5lxuswdw9","rftnddr5kr2oi9582nrwjxd","nm541dgoi0njzxnux7it18y","5fs80ws2li1d12hstqngu4h"],"parent":null,"data":{},"body":"\n## Quick access\n\n- [C++ STL]([[lang.cpp.std]])"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"DendronVault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","assetsPrefix":"/DendronVault","siteUrl":"https://diwashrai.github.io","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}