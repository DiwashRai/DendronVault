{"pageProps":{"note":{"id":"3vtad9ehlxwa5n2gffrjsr1","title":"Versions","desc":"","updated":1688501773657,"created":1688494431962,"custom":{},"fname":"lang.cpp.versions","type":"note","vault":{"fsPath":".","selfContained":true,"name":"DendronVault"},"contentHash":"8d364e838921f47bbe826373fb5bfbbc","links":[{"type":"wiki","from":{"fname":"lang.cpp.versions","id":"3vtad9ehlxwa5n2gffrjsr1","vaultName":"DendronVault"},"value":"tags.elifdef","alias":"#elifdef","position":{"start":{"line":172,"column":5,"offset":10029},"end":{"line":172,"column":13,"offset":10037},"indent":[]},"xvault":false,"to":{"fname":"tags.elifdef"}},{"type":"wiki","from":{"fname":"lang.cpp.versions","id":"3vtad9ehlxwa5n2gffrjsr1","vaultName":"DendronVault"},"value":"tags.elifndef","alias":"#elifndef","position":{"start":{"line":172,"column":15,"offset":10039},"end":{"line":172,"column":24,"offset":10048},"indent":[]},"xvault":false,"to":{"fname":"tags.elifndef"}},{"type":"wiki","from":{"fname":"lang.cpp.versions","id":"3vtad9ehlxwa5n2gffrjsr1","vaultName":"DendronVault"},"value":"tags.warning","alias":"#warning","position":{"start":{"line":172,"column":30,"offset":10054},"end":{"line":172,"column":38,"offset":10062},"indent":[]},"xvault":false,"to":{"fname":"tags.warning"}}],"anchors":{"c-evolution-through-the-years":{"type":"header","text":"C++ evolution through the years","value":"c-evolution-through-the-years","line":8,"column":0,"depth":1},"pre-98":{"type":"header","text":"Pre 98","value":"pre-98","line":10,"column":0,"depth":2},"c-98":{"type":"header","text":"C++ 98","value":"c-98","line":28,"column":0,"depth":2},"c-03":{"type":"header","text":"C++ 03","value":"c-03","line":47,"column":0,"depth":2},"c-11":{"type":"header","text":"C++ 11","value":"c-11","line":59,"column":0,"depth":2},"c-14":{"type":"header","text":"C++ 14","value":"c-14","line":88,"column":0,"depth":2},"c-17":{"type":"header","text":"C++ 17","value":"c-17","line":107,"column":0,"depth":2},"c-20":{"type":"header","text":"C++ 20","value":"c-20","line":140,"column":0,"depth":2},"c-23":{"type":"header","text":"C++ 23","value":"c-23","line":168,"column":0,"depth":2}},"children":[],"parent":"7k937deztzwxmov1gbde86f","data":{}},"body":"<h1 id=\"versions\">Versions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#versions\"></a></h1>\n<h1 id=\"c-evolution-through-the-years\">C++ evolution through the years<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#c-evolution-through-the-years\"></a></h1>\n<h2 id=\"pre-98\">Pre 98<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#pre-98\"></a></h2>\n<p><strong>Early evolution</strong>:</p>\n<ul>\n<li>Bjarne Stroustrup started development of C++ in 1979 at Bell Labs as an enhancement to the C\nlanguage. It was originally named C with Classes but later it was renamed C++ in 1983.</li>\n</ul>\n<p><strong>C with class</strong>:</p>\n<ul>\n<li><strong>Classes</strong>: Introduced user-defined types that encapsulate data and related functions.</li>\n<li><strong>Objects</strong>: Allows creation of objects from classes.</li>\n<li><strong>Data abstraction</strong>: Enabled separation of interface(public members) and implementation(private\nmembers).</li>\n<li><strong>Member functions</strong>: Functions that can be defined within the class definition and can access\nthe class's private and public members.</li>\n<li><strong>Inheritance</strong>: Creation of new classes based on existing classes.</li>\n<li><strong>Constructors &#x26; destructors</strong></li>\n<li><strong>Operator overloading</strong></li>\n<li><strong>Type checking</strong> during compilation</li>\n<li><strong>Inline functions</strong></li>\n</ul>\n<h2 id=\"c-98\">C++ 98<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#c-98\"></a></h2>\n<p>The first standardised version of the C++ language. Provided a consistent definition of the\nlanguage that all compilers could adhere to.</p>\n<p><strong>Features</strong>:</p>\n<ul>\n<li><strong>Templates</strong>: Allowed definition of generic classes and functions making code more reusable\nand flexible.</li>\n<li><strong>STL</strong>: The standard template library - a powerful library of template classes and functions.</li>\n<li><strong>Namespaces</strong>: Help organise code and prevent naming conflicts.</li>\n<li><strong>Exceptions</strong>: Provide a way to handle error conditios separate to the main flow of program\ncontrol.</li>\n<li><strong>New casts</strong>: (dynamic_cast, static_cast, reinterpret_cast, const_cast) Safer and more precise\nalternative to C-style casts.</li>\n<li><strong>Boolean type</strong>: 'true' and 'false'</li>\n<li><strong>RTTI</strong>: Run-Time Type Information. Allows information about object's type to be retrieved\nduring runtime.</li>\n<li><strong>'auto_ptr' Smart Pointer</strong>: Early version of the smart pointer</li>\n<li><strong>Internationalisation support</strong>: Provided by the <code>&#x3C;locale></code> library.</li>\n</ul>\n<h2 id=\"c-03\">C++ 03<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#c-03\"></a></h2>\n<p>Essentially a 'bug fix' version of C++98. Did no introduce any major new features but focused on\ncorrecting issues and ambiguities identified in C++98 standard.</p>\n<p>The few minor features included were:</p>\n<ul>\n<li><strong>Value initialisation</strong>: Used to ensure objects are intialised even if no explicit initialiser\nis provided.</li>\n<li><strong>Library extensions</strong>: STL was expanded with new functions and existing ones improved.</li>\n<li><strong>Exception specifications</strong>: Clarifications to how exception specs worked. Included \"throw\nnothing\" by using <code>throw()</code>.</li>\n<li><strong>Keyword <code>export</code></strong>: Difficult to implement and seldom used. Was since removed in C++11.</li>\n</ul>\n<h2 id=\"c-11\">C++ 11<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#c-11\"></a></h2>\n<p>Major update to C++ that had a host of new features and improvements. It was a significant\nmilestone in the evolution of C++ and made the language more modern, safer and expressive. It\nchanged the way programmers wrote code and improved perfomance of C++ applications.</p>\n<p>The changes were significant enough that people refer to modern C++ as a different language to\ncompared to pre-C++11.</p>\n<ul>\n<li><strong>Rvalue references and Move semantics</strong>: Allows 'moving' resources instead of copying them.\nCan significantly imporove performance, particularly with alrge data structures.</li>\n<li><strong>Smart pointers</strong>: New memory management tools: <code>shared_ptr</code>, <code>unique_ptr</code> and <code>weak_ptr</code></li>\n<li><strong>Auto keyword</strong>: Allows automatic type deduction which can make code more readable and easier\nto maintain.</li>\n<li><strong>Nullptr keyword</strong>: Replaces the ambiguous <code>NULL</code>.</li>\n<li><strong>Range-based for loops</strong>: Simpler syntax to iterate over collections.</li>\n<li><strong>Initialiser lists</strong>: A new way to initialise objects allowing more compact and intuitive code.</li>\n<li><strong>Lambda expressions</strong>: Feature borrowed from functional languages that make it easier to use\nfunction objects.</li>\n<li><strong>Concurrency support</strong>: Native support for multithreading including threads, locks and condition\nvariables.</li>\n<li><strong>Type inference</strong>: The <code>decltype</code> keyword was introduced, which deduces the type of an\nexpression</li>\n<li><strong>Strongly typed enums</strong>: <code>enum class</code> was introduced which is more type-safe than normal enums.</li>\n<li><strong>Deleted and defaulted functions</strong>: Allows for default generation of constructor and assignment\nfunctions and to delete them when not required.</li>\n<li><strong>Variadic templates</strong>: Allows creation of functions and classes with arbitrary number of\ntemplate parameters in a type-safe way.</li>\n<li><strong>User defined literals</strong>: Enables more readable code by allowing user defined literals.</li>\n</ul>\n<h2 id=\"c-14\">C++ 14<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#c-14\"></a></h2>\n<p>A more minor release in comparison to C++11.</p>\n<ul>\n<li><strong>Generalised lambda expressions</strong>: Allows lambdas to deduce the return type of functions and\nintroduced generalised capture, which allows capturing of variables by move.</li>\n<li><strong>Binary literals</strong>: Allows binary literals to be specified using the <code>0b</code> prefix.</li>\n<li><strong>Function return type deduction</strong>: The compiler can now deduce the return type of a function.</li>\n<li><strong>Extended constexpr</strong>: Extended <code>constexpr</code> to allow more functions to be evaluated at compile\ntime.</li>\n<li><strong>Variable templates</strong>: Allows definition of variables using template parameters.</li>\n<li><strong>Relaxed constraints on constexpr functions</strong>: constexpr functions can now include loops,\nswitches etc, allowing for more complex compile time computations.</li>\n<li><strong>Deprecation of auto_ptr</strong>: <code>auto_ptr</code> deprecated and replaced by <code>unique_ptr</code></li>\n<li><strong>Generic lambdas</strong>: lambas can take auto type parameters, making them polymorphic.</li>\n<li><strong>Standard user-defined literals</strong>: Allows defining of new literal ==suffixes==. It is now\npossible to represent 5 seconds with something like <code>5_s</code> now.</li>\n<li><strong>[[deprecated]] Attribute</strong>: Can no mark code as deprecated to show code should not be used.</li>\n<li><strong>Improved STL</strong>: addtional extensions to the STL.</li>\n</ul>\n<h2 id=\"c-17\">C++ 17<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#c-17\"></a></h2>\n<p>Neither a small or large update to C++. Many new language features introduced, library components,\nand improved performance in certain areas.</p>\n<p>C++17 contiued the modernisation of C++, focusing not just on performance but also on simplifying\nthe language, improving its consistency, and making it more expressive. Its impact on performance\nand idiomatic C++ are seen in the adoption of new practices that leverage these features, which\nprovide more compile-time checks, clearer intentions, and better abstractions.</p>\n<ul>\n<li><strong>Structured bindings</strong>: allows declaration of multiple variables initialised from a tuple or\nstruct in a single statement. Makes code more compact and readable.</li>\n<li><strong>If and Switch with initialiser</strong>: can now declare a variable in the same statement as an if or\nswitch, reducing scope and making code cleaner.</li>\n<li><strong>Inline variables</strong>: Similar to inline functions, inline variables can be defined in headers\nand included in multiple files without violating one definition rule.</li>\n<li><strong>Fold expressions</strong>: simplifies usage of variadic templates by allowing operations to be\nperformed on all elements of a parameter pack.</li>\n<li><strong>constexpr if (Compile-time if)</strong>: allows conditional compilation based on template parameters,\neliminating the need for template specialisations in many cases.</li>\n<li><strong>Template arugment deduction for class templates</strong>: allows template class instantiation without\nexplicitly specifying the template arguments.</li>\n<li><strong>std::optional, std::variant, and std::any</strong>: provides better ways to handle optional values,\nvariant types, and type-safe unions respectively.</li>\n<li><strong>Improved and expanded STL</strong>: numerous additions such as the filesystem library, parallel\nalgorithms, new string conversion functions and more...</li>\n<li><strong>Nested namespaces</strong>: allows nesting of namespaces in a single statement.</li>\n<li><strong>Removal of deprecated features</strong>: removed features such as std::auto_ptr, std::random_shuffle,\nand the register keyword.</li>\n<li><strong>New attributes</strong>: new standard attributes like [[fallthrough]], [[nodiscard]],\nand [[maybe_unused]] were added to communicate intent more clearly.</li>\n<li><strong>Direct list initialisation of enums</strong>: allows more type-safe code by allowing enums to be\ndirectly list-initialised.</li>\n</ul>\n<h2 id=\"c-20\">C++ 20<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#c-20\"></a></h2>\n<p>A major update that brought an abundance of powerful and expressive features to the language. It\nis considered one of the most significant updates to the C++ standard, comparable to C++11 in the\nbreadth and depth of its changes. C++20 strides towards making the language safer, simpler more\nefficient, and more expressive, resulting in better performance and more idiomatic code.</p>\n<ul>\n<li><strong>Concepts</strong>: new form of compile-time duck typing. Represents named set of requirements such as\nsyntactic requirements, semantic requirements, and type requirements.</li>\n<li><strong>Ranges</strong>: new library that provides components for handling ranges of values. Builds upon the\niterator concept allowing for more expressive code.</li>\n<li><strong>Coroutines</strong>: Generalisation of subroutines. Used for computations that can be suspended and\nresumed. This can lead to more efficient and simpler asynchronous code.</li>\n<li><strong>Modules</strong>: New way to package code which can lead to faster compilation times, improved\nencapsulation and isolation, ease of use, and better tooling.</li>\n<li><strong>Three-way comparison (Spaceship) operator <code>&#x3C;=></code></strong>: Simplifies writing comparison operators for\nuser defined typed.</li>\n<li><strong>Calendar &#x26; Timezone library</strong>: New standard library to handle dates, times, and timezones.</li>\n<li><strong>Format library</strong>: New type-safe printf-like library for text formatting.</li>\n<li><strong>Expanded constexpr</strong>: more of the STL can be used in constexpr contexts.</li>\n<li><strong>New standard attributes</strong>: Likely and unlikely attributes were added to give the programmer the\nability to provide compiler with branch prediction information.</li>\n<li><strong>constexpr dynamic allocation</strong>: Allows dynamic allocation in consexpr contexts with limitations\nto ensure compuations are still performed at compile time.</li>\n<li><strong>Feature-test macros:</strong>: Macros that test whether a certain feature is available in current C++\nenvironment.</li>\n<li><strong>std::span</strong>: A new object to provide a lightweight, non-owning reference to a sequence, or a\npart of a sequence.</li>\n</ul>\n<h2 id=\"c-23\">C++ 23<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#c-23\"></a></h2>\n<p>The latest update to C++. Seems like this update fully achieves what C++20 set out to do. This\nprobably means it does not count as one of the land mark C++ updates, but still not a small one.</p>\n<p><strong>Core language changes:</strong></p>\n<ul>\n<li><strong>Deducing <code>this</code></strong>:</li>\n<li><strong>if consteval</strong>:</li>\n<li><strong>Attributes for lambdas</strong>:</li>\n<li><strong>std::size_t literals</strong>:</li>\n<li><strong>auto(x) decay-copy in the language</strong>:</li>\n<li><strong><a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">#elifdef (Private)</a>, <a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">#elifndef (Private)</a>, and <a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">#warning (Private)</a></strong>:</li>\n<li><strong>std::unreachable</strong>:</li>\n<li><strong>Assumptions</strong>:</li>\n<li><strong>Named universal character escapes</strong>:</li>\n<li><strong>Trim whitespace before line splicing</strong>:</li>\n<li><strong>static operator()</strong>:</li>\n</ul>\n<p><strong>C++ Standard Library:</strong></p>\n<ul>\n<li><strong>String formatting improvements</strong>:</li>\n<li><strong>STL modules</strong>:</li>\n<li><strong>std::flat<em>(multi)map and std::flat</em>(multi)set</strong>:</li>\n<li><strong>std::mdspan</strong>:</li>\n<li><strong>std::generator</strong>:</li>\n<li><strong>basic_string::contains and basic_string_view::contains</strong>:</li>\n<li><strong>construct string_view from nullptr</strong>:</li>\n<li><strong>basic_string::resize_and_overwrite()</strong>:</li>\n<li><strong>Monadic interface for std::optional</strong>:</li>\n<li><strong>std::stacktrace</strong>:</li>\n<li><strong>Changes to Ranges library</strong>:</li>\n<li><strong>Changes to Views library</strong>:</li>\n<li><strong>std::expected</strong>:</li>\n<li><strong>std::move_only_function&#x3C;></strong>:</li>\n<li><strong>std::spanstream</strong>:</li>\n<li><strong>std::byteswap</strong>:</li>\n<li><strong>std::to_underlying</strong>:</li>\n<li><strong>Associative containers heterogeneous erasure</strong>:</li>\n</ul>\n<p><strong>Others (not sure)</strong>:</p>\n<ul>\n<li><strong>std::out_ptr, std::inout_ptr</strong>:</li>\n<li><strong>constexpr std::unique_ptr</strong>:</li>\n<li><strong>std::print</strong>:</li>\n<li><strong>Formatted ranges</strong>:</li>\n<li><strong>std::is_scoped_enum</strong>:</li>\n<li><strong>Multi-dimenstional index operator</strong>:</li>\n<li><strong>constexpr for cmath</strong>:</li>\n</ul>","noteIndex":{"id":"txvdlk2mbhl2y2muokxxozo","title":"Root","desc":"","updated":1664676002873,"created":1664671276173,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"DendronVault"},"contentHash":"896d57ab408d13d6cce66d3360a4c1be","links":[],"anchors":{"quick-access":{"type":"header","text":"Quick access","value":"quick-access","line":8,"column":0,"depth":2}},"children":["akgpjs39sueidxnil3k1feg","cq5doh4f24evc4ewzhg5yf3","3xtbw7nonlogrlsu9k2hymz","lubegqfiz1ik4hq8fnomek2","uhd2kqv69ly9jb7r0o6dw1t","155oput5ed55eq5lxuswdw9","rftnddr5kr2oi9582nrwjxd","nm541dgoi0njzxnux7it18y","5fs80ws2li1d12hstqngu4h"],"parent":null,"data":{},"body":"\n## Quick access\n\n- [C++ STL]([[lang.cpp.std]])"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"DendronVault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","assetsPrefix":"/DendronVault","siteUrl":"https://diwashrai.github.io","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}