{"pageProps":{"note":{"id":"hp7jv15215pi0s92tkgr4ob","title":"Cmake","desc":"","updated":1688259552869,"created":1665227552280,"custom":{},"fname":"tools.cmake","type":"note","vault":{"fsPath":".","selfContained":true,"name":"DendronVault"},"contentHash":"b65e6638d2f03e73331c2567786d3e67","links":[],"anchors":{"building-and-existing-project-cheatsheet":{"type":"header","text":"building and existing project cheatsheet","value":"building-and-existing-project-cheatsheet","line":8,"column":0,"depth":2},"modern-cmake-in-a-nutshell":{"type":"header","text":"Modern CMake in a nutshell","value":"modern-cmake-in-a-nutshell","line":16,"column":0,"depth":2},"global-setup":{"type":"header","text":"Global setup","value":"global-setup","line":25,"column":0,"depth":3},"delcare-your-module":{"type":"header","text":"Delcare your module","value":"delcare-your-module","line":40,"column":0,"depth":3},"declare-your-flags":{"type":"header","text":"Declare your flags","value":"declare-your-flags","line":49,"column":0,"depth":3},"declare-your-dependencies":{"type":"header","text":"Declare your dependencies","value":"declare-your-dependencies","line":61,"column":0,"depth":3},"header-only-libraries":{"type":"header","text":"Header-only libraries","value":"header-only-libraries","line":71,"column":0,"depth":3},"anti-patterns":{"type":"header","text":"Anti-patterns","value":"anti-patterns","line":81,"column":0,"depth":2}},"children":[],"parent":"nm541dgoi0njzxnux7it18y","data":{}},"body":"<h1 id=\"cmake\">Cmake<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#cmake\"></a></h1>\n<h2 id=\"building-and-existing-project-cheatsheet\">building and existing project cheatsheet<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#building-and-existing-project-cheatsheet\"></a></h2>\n<p>vcpkg toolchain file if needed:</p>\n<pre><code>cmake -B &#x3C;build dir> -S &#x3C;source dir> -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=&#x3C;path to vcpkg>/scripts/buildsystems/vcpkg.cmake\ncmake --build &#x3C;build dir>\n</code></pre>\n<h2 id=\"modern-cmake-in-a-nutshell\">Modern CMake in a nutshell<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#modern-cmake-in-a-nutshell\"></a></h2>\n<ul>\n<li>Declare your module with ADD_LIBRARY or ADD_EXECUTABLE  </li>\n<li>Declare your build flags with TARGET_xxx()  </li>\n<li>Declare your dependencies with TARGET_LINK_LIBRARIES  \n<ul>\n<li>Works for linking directly to libary</li>\n<li>and for linking to module with a project with interface</li>\n</ul>\n</li>\n<li>Specify what is public and private</li>\n</ul>\n<h3 id=\"global-setup\">Global setup<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#global-setup\"></a></h3>\n<ul>\n<li>Use at least version 3.0</li>\n<li>Some flags should still be declared at the top level that you want everywhere. E.g. -Wall -Werror</li>\n</ul>\n<pre class=\"language-cmake\"><code class=\"language-cmake\"><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">MSVC</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">add_compile_options</span><span class=\"token punctuation\">(</span>/W3 /WX<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">add_compile_options</span><span class=\"token punctuation\">(</span>-W -Wall -Werror<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">endif</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"delcare-your-module\">Delcare your module<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#delcare-your-module\"></a></h3>\n<pre class=\"language-cmake\"><code class=\"language-cmake\"><span class=\"token keyword\">add_library</span><span class=\"token punctuation\">(</span>mylib\n    src/file1.cpp\n    src/file2.cpp\n    ...<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"declare-your-flags\">Declare your flags<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#declare-your-flags\"></a></h3>\n<pre class=\"language-cmake\"><code class=\"language-cmake\"><span class=\"token keyword\">target_include_directories</span><span class=\"token punctuation\">(</span>mylib <span class=\"token namespace\">PUBLIC</span> include<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">target_include_directories</span><span class=\"token punctuation\">(</span>mylib <span class=\"token namespace\">PRIVATE</span> src<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SOME_SETTING<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">target_compile_definitions</span><span class=\"token punctuation\">(</span>mylib\n            <span class=\"token namespace\">PUBLIC</span> WITH_SOME_SETTING<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">endif</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"declare-your-dependencies\">Declare your dependencies<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#declare-your-dependencies\"></a></h3>\n<pre class=\"language-cmake\"><code class=\"language-cmake\"><span class=\"token comment\"># Public (interface) dependencies</span>\n<span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>mylib <span class=\"token namespace\">PUBLIC</span> abc<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Private (implementation) dependencies</span>\n<span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>mylib <span class=\"token namespace\">PRIVATE</span> xyz<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"header-only-libraries\">Header-only libraries<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#header-only-libraries\"></a></h3>\n<pre class=\"language-cmake\"><code class=\"language-cmake\"><span class=\"token keyword\">add_library</span><span class=\"token punctuation\">(</span>mylib <span class=\"token namespace\">INTERFACE</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">target_include_directories</span><span class=\"token punctuation\">(</span>mylib <span class=\"token namespace\">INTERFACE</span> include<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>mylib <span class=\"token namespace\">INTERFACE</span> <span class=\"token inserted class-name\">Boost::Boost</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"anti-patterns\">Anti-patterns<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#anti-patterns\"></a></h2>\n<ul>\n<li>Don't use macros that affect all targets\n<ul>\n<li>INCLUDE_DIRECTORIES()</li>\n<li>ADD_DEFINITIONS()</li>\n<li>LINK_LIBRARIES</li>\n</ul>\n</li>\n<li>Don't use TARGET_INCLUDE_DIRECTORIES() with a path outside your module</li>\n<li>Don't use TARGET_LINK_LIBRARIES() without specifying PUBLIC, PRIVATE or INTERFACE</li>\n<li>Don't use TARGET_COMPILE_OPTIONS() to set flats that affect the ABI</li>\n</ul>","noteIndex":{"id":"txvdlk2mbhl2y2muokxxozo","title":"Root","desc":"","updated":1664676002873,"created":1664671276173,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"DendronVault"},"contentHash":"896d57ab408d13d6cce66d3360a4c1be","links":[],"anchors":{"quick-access":{"type":"header","text":"Quick access","value":"quick-access","line":8,"column":0,"depth":2}},"children":["akgpjs39sueidxnil3k1feg","cq5doh4f24evc4ewzhg5yf3","3xtbw7nonlogrlsu9k2hymz","lubegqfiz1ik4hq8fnomek2","uhd2kqv69ly9jb7r0o6dw1t","155oput5ed55eq5lxuswdw9","rftnddr5kr2oi9582nrwjxd","nm541dgoi0njzxnux7it18y","5fs80ws2li1d12hstqngu4h"],"parent":null,"data":{},"body":"\n## Quick access\n\n- [C++ STL]([[lang.cpp.std]])"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"DendronVault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","assetsPrefix":"/DendronVault","siteUrl":"https://diwashrai.github.io","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}